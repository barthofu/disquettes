
<div id="tableHTML"></div>



<script>










 function deleteDisquette(e, cell){

    console.log(cell.getData())


        fetch(new Request('/api/delete', { method: 'post',    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
     body: JSON.stringify( {
          id: cell.getData()._id,
          type: "validate"
         } )}))
        .then(data => data.json())
        .then(data => {
                console.log(data)
                if(data.status === "error"){
                        console.log("error")
                }else if (data.status === "success"){
                    console.log("succes")
                    cell.getRow().delete()
                }
        })

    }
    

function waitingDisquette(e, cell){

alert("cell clicked - " + cell.getData())
}


function cellEdit(cell){

    console.log(cell.getRow().getData())

        fetch(new Request('/api/list/update/validate', { method: 'post',   
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
     body: JSON.stringify({data: cell.getRow().getData(), type: "validate" })}))
        .then(data => data.json())
        .then(data => {
                console.log(data)
                if(data.status === "error"){
                        console.log("error")
                }else if (data.status === "success"){
                    console.log("succes")
        }}) 

    }



    var tagsEditor = function(cell, onRendered, success, cancel){
    //cell - the cell component for the editable cell
    //onRendered - function to call when the editor has been rendered
    //success - function to call to pass the successfuly updated value to Tabulator
    //cancel - function to call to abort the edit and return to a normal cell

    //create and style input
    var cellValue = cell.getValue()
    input = document.createElement("input");

    input.setAttribute("type", "tags");

    input.style.padding = "4px";
    input.style.width = "100%";
    input.style.boxSizing = "border-box";

    input.value = cellValue;

    console.log(tagsArray);
    tagsArray = cellValue[0].split(/,| /)
    onRendered(function(){
    });

    function onChange(){
        if(input.value != cellValue){
            console.log(tagsArray);
            success(tagsArray);
        }else{
            cancel();
        }
    }
    //submit new value on blur or change

    //submit new value on enter

    return input;
};














function updateDisquette(data){
    console.log(data)
    fetch(new Request('/api/post', { method: 'post',    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
     body: JSON.stringify( {
         data,
          type: "validate"
         } )}))
        .then(data => data.json())
        .then(data => {
                console.log(data)
                if(data.status === "error"){
                        console.log("error")
                }else if (data.status === "success"){
                    console.log("succes")
                }
        })
}



//create custom editor
var updateTags = function(cell, onRendered, success, cancel, editorParams){

//create input element to hold select
var editor = document.createElement("select");
editor.classList.add("form-control");
editor.setAttribute("multiple", "multiple");
editor.value = cell.getValue()
editor.style.padding = "3px";
    editor.style.width = "100%";
    editor.style.boxSizing = "border-box";


    

onRendered(function(){
    console.log("onrendered");
    
    editor.style.css = "100%";
    var select_2 = $(editor);

    let liste = cell.getValue().map(element => {
  return {
      id: element,
      text: element,
    selected: true
  }
});

console.log(liste);

    select_2.select2({
        closeOnSelect: false,
        tags: true,
        tokenSeparators: [',', ' '],
        data: liste
       
    });

    select_2.on('select2:closing', function (e) {
        console.log(liste);
        console.log(select_2.val());
        success(select_2.val());

       // select_2.select2('destroy');
    });

});

//add editor to cell
return editor;
}


    var table = new Tabulator("#tableHTML", {
    height:"600px",
    layout:"fitDataFill",
    ajaxURL:"/api/list/validate",
    ajaxProgressiveLoad:"scroll",
    paginationSize:20,
    responsiveLayout: "collapse",
    cellEdited: cellEdit,
    // dataChanged:function(data){
     
    //     console.log(data)
    // fetch(new Request('/api/list/update/validate', { method: 'post',    headers: {
    //   'Accept': 'application/json',
    //   'Content-Type': 'application/json'
    // },
    //  body: JSON.stringify( {
    //      data,
    //       type: "validate"
    //      } )}))
    //     .then(data => data.json())
    //     .then(data => {
    //             console.log(data)
    //             if(data.status === "error"){
    //                     console.log("error")
    //             }else if (data.status === "success"){
    //                 console.log("succes")
    //             }
    //     })


    // },
    ajaxProgressiveLoadScrollMargin:300,
    placeholder:"Pas de donn√©es",
    columns:[
        {title:"Disquette", field:"disquette", editor: "input", sorter:"string"},
        {title:"Tags",editor: updateTags, field:"tags", width: 100},
        {title:"Auteur", field:"author", editor: "input", sorter:"string" },
        //{title:"Rating", field:"rating", formatter:"star", align:"center", width:100},
        {title:"Genre", field:"genre", sorter:"string", formatter:function(cell, formatterParams){
            data = cell.getValue()
            switch (data) {
                case 0:
                    return "All"
                    break;
                case 1:
                    return "Femme"
                    break;
                case 2:
                    return "Homme"
                    break;
                default:
                    break;
            }
        }},
        {title:"Age", field:"age", sorter:"date", align:"center", formatter:function(cell, formatterParams){
            data = cell.getValue()
            switch (data) {
                case 0:
                    return "All"
                    break;
                case 1:
                    return "18-25"
                    break;
                case 2:
                    return "26-35"
                    break;
                case 3:
                    return "36+"
                    break;
                default:
                    break;
            }
        }},
        {title:"Langue", field:"lang", sorter:"date", align:"center"},
        {title:"Date", field:"submittedAt", sorter:"date", align:"center", formatter: function(cell, formatterParams) {

            
            return new Date(cell.getValue()).toLocaleString('fr-FR', { day: "2-digit", month: "2-digit", year: "numeric" })
        }},
        {title:"Note", field:"votes", sorter:"number", align:"center", formatter:function(cell, formatterParams){

            let ratio = (cell.getValue().up / cell.getValue().down *100)
            if(!ratio) return "X"
            return (ratio+ "%")
        }},
        {title:"Supprimer", field:"car", align:"center", formatter:"buttonCross", widthGrow: 20,
        cellClick:deleteDisquette},
    ],
}
);







</script>
